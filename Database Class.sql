CREATE TABLE REP
(REP_NUM CHAR(2) PRIMARY KEY,
LAST_NAME CHAR(15),
FIRST_NAME CHAR(15),
STREET CHAR(15),
CITY CHAR(15),
STATE CHAR(2),
POSTAL_CODE CHAR(5),
COMMISSION DECIMAL(7,2),
RATE DECIMAL(3,2) );


CREATE TABLE CUSTOMER
(CUSTOMER_NUM CHAR(3) PRIMARY KEY,
CUSTOMER_NAME CHAR(35) NOT NULL,
STREET CHAR(20),
CITY CHAR(15),
STATE CHAR(2),
POSTAL_CODE CHAR(5),
BALANCE DECIMAL(8,2),
CREDIT_LIMIT DECIMAL(8,2),
REP_NUM CHAR(2) );


CREATE TABLE ORDERS
(ORDER_NUM CHAR(5) PRIMARY KEY,
ORDER_DATE DATE,
CUSTOMER_NUM CHAR(3) );


CREATE TABLE ITEM
(ITEM_NUM CHAR(4) PRIMARY KEY,
DESCRIPTION CHAR(30),
ON_HAND DECIMAL(4,0),
CATEGORY CHAR(3),
STOREHOUSE CHAR(1),
PRICE DECIMAL(6,2) );


CREATE TABLE ORDER_LINE
(ORDER_NUM CHAR(5),
ITEM_NUM CHAR(4),
NUM_ORDERED DECIMAL(3,0),
QUOTED_PRICE DECIMAL(6,2),
PRIMARY KEY (ORDER_NUM, ITEM_NUM) );

INSERT INTO REP
VALUES
('15','Campos','Rafael','724 Vinca Dr.','Grove','CA','90092',23457.50,0.06);
INSERT INTO REP
VALUES
('30','Gradey','Megan','632 Liatris St.','Fullton','CA','90085',41317.00,0.08);
INSERT INTO REP
VALUES
('45','Tian','Hui','1785 Tyler Ave.','Northfield','CA','90098',27789.25,0.06);
INSERT INTO REP
VALUES
('60','Sefton','Janet','267 Oakley St.','Congaree','CA','90097',0.00,0.06);
INSERT INTO CUSTOMER
VALUES
('126','Toys Galore','28 Laketon St.','Fullton','CA','90085',1210.25,7500.00,'15');
INSERT INTO CUSTOMER
VALUES
('260','Brookings Direct','452 Columbus Dr.','Grove','CA','90092',575.00,10000.00,'30');
INSERT INTO CUSTOMER
VALUES
('334','The Everything Shop','342 Magee St.','Congaree','CA','90097',2345.75,7500.00,'45');
INSERT INTO CUSTOMER
VALUES
('386','Johnson''s Department Store','124 Main St.','Northfield','CA','90098',879.25,7500.00,'30');
INSERT INTO CUSTOMER
VALUES
('440','Grove Historical Museum Store','3456 Central Ave.','Fullton','CA','90085',345.00,5000.00,'45');
INSERT INTO CUSTOMER
VALUES
('502','Cards and More','167 Hale St.','Mesa','CA','90104',5025.75,5000.00,'15');
INSERT INTO CUSTOMER
VALUES
('586','Almondton General Store','3345 Devon Ave.','Almondton','CA','90125',3456.75,15000.00,'45');
INSERT INTO CUSTOMER
VALUES
('665','Cricket Gift Shop','372 Oxford St.','Grove','CA','90092',678.90,7500.00,'30');
INSERT INTO CUSTOMER
VALUES
('713','Cress Store','12 Rising Sun Ave.','Congaree','CA','90097',4234.60,10000.00,'15');
INSERT INTO CUSTOMER
VALUES
('796','Unique Gifts','786 Passmore St.','Northfield','CA','90098',124.75,7500.00,'45');
INSERT INTO CUSTOMER
VALUES
('824','Kline''s','945 Gilham St.','Mesa','CA','90104',2475.99,15000.00,'30');
INSERT INTO CUSTOMER
VALUES
('893','All Season Gifts','382 Wildwood Ave.','Fullton','CA','90085',935.75,7500.00,'15');
INSERT INTO ORDERS
VALUES
('51608','12-OCT-2015','126');
INSERT INTO ORDERS
VALUES
('51610','12-OCT-2015','334');
INSERT INTO ORDERS
VALUES
('51613','13-OCT-2015','386');
INSERT INTO ORDERS
VALUES
('51614','13-OCT-2015','260');
INSERT INTO ORDERS
VALUES
('51617','15-OCT-2015','586');
INSERT INTO ORDERS
VALUES
('51619','15-OCT-2015','126');
INSERT INTO ORDERS
VALUES
('51623','15-OCT-2015','586');
INSERT INTO ORDERS
VALUES
('51625','16-OCT-2015','796');
INSERT INTO ITEM
VALUES
('AH74','Patience',9.00,'GME','3',22.99);
INSERT INTO ITEM
VALUES
('BR23','Skittles',21.00,'GME','2',29.99);
INSERT INTO ITEM
VALUES
('CD33','Wood Block Set (48 piece)',36.00,'TOY','1',89.49);
INSERT INTO ITEM
VALUES
('DL51','Classic Railway Set',12.00,'TOY','3',107.95);
INSERT INTO ITEM
VALUES
('DR67','Giant Star Brain Teaser',24.00,'PZL','2',31.95);
INSERT INTO ITEM
VALUES
('DW23','Mancala',40.00,'GME','3',50.00);
INSERT INTO ITEM
VALUES
('FD11','Rocking Horse',8.00,'TOY','3',124.95);
INSERT INTO ITEM
VALUES
('FH24','Puzzle Gift Set',65.00,'PZL','1',38.95);
INSERT INTO ITEM
VALUES
('KA12','Cribbage Set',56.00,'GME','3',75.00);
INSERT INTO ITEM
VALUES
('KD34','Pentominoes Brain Teaser',60.00,'PZL','2',14.95);
INSERT INTO ITEM
VALUES
('KL78','Pick Up Sticks',110.00,'GME','1',10.95);
INSERT INTO ITEM
VALUES
('MT03','Zauberkasten Brain Teaser',45.00,'PZL','1',45.79);
INSERT INTO ITEM
VALUES
('NL89','Wood Block Set (62 piece)',32.00,'TOY','3',119.75);
INSERT INTO ITEM
VALUES
('TR40','Tic Tac Toe',75.00,'GME','2',13.99);
INSERT INTO ITEM
VALUES
('TW35','Fire Engine',30.00,'TOY','2',118.95);
INSERT INTO ORDER_LINE
VALUES
('51608','CD33',5.00,86.99);
INSERT INTO ORDER_LINE
VALUES
('51610','KL78',25.00,10.95);
INSERT INTO ORDER_LINE
VALUES
('51610','TR40',10.00,13.99);
INSERT INTO ORDER_LINE
VALUES
('51613','DL51',5.00,104.95);
INSERT INTO ORDER_LINE
VALUES
('51614','FD11',1.00,124.95);
INSERT INTO ORDER_LINE
VALUES
('51617','NL89',4.00,115.99);
INSERT INTO ORDER_LINE
VALUES
('51617','TW35',3.00,116.95);
INSERT INTO ORDER_LINE
VALUES
('51619','FD11',2.00,121.95);
INSERT INTO ORDER_LINE
VALUES
('51623','DR67',5.00,29.95);
INSERT INTO ORDER_LINE
VALUES
('51623','FH24',12.00,36.95);
INSERT INTO ORDER_LINE
VALUES
('51623','KD34',10.00,13.10);
INSERT INTO ORDER_LINE
VALUES
('51625','MT03',8.00,45.79);


SELECT *
FROM REP;

SELECT *
FROM CUSTOMER;

SELECT *
FROM ORDERS;

SELECT *
FROM ORDER_LINE;

SELECT *
FROM ITEM;


CREATE TABLE INVENTORY
(PARTNO CHAR(3) PRIMARY KEY,
DESCRIPTION CHAR(10),
QONHAND DECIMAL(5,0));

CREATE TABLE SUPPLIERS
(SUPPNO CHAR(3) PRIMARY KEY,
NAME CHAR(20),
ADDRESS CHAR(30));

CREATE TABLE SUPPLIES
(PARTNO CHAR(3),
SUPPNO CHAR(3),
QTY_DISP DECIMAL(3,0),
DATE_DISP DATE,
PRIMARY KEY(PARTNO , SUPPNO),
FOREIGN KEY(PARTNO) REFERENCES INVENTORY,
FOREIGN KEY(SUPPNO) REFERENCES SUPPLIERS );


INSERT INTO INVENTORY
VALUES
('207','Gear',75.00);

INSERT INTO INVENTORY
VALUES
('209','Cam',50.00);

INSERT INTO INVENTORY
VALUES
('221','Bolt',650.00);

INSERT INTO INVENTORY
VALUES
('222','Bolt',1250.00);

INSERT INTO INVENTORY
VALUES
('231','Nut',700.00);

INSERT INTO INVENTORY
VALUES
('232','Nur',1100.00);

INSERT INTO INVENTORY
VALUES
('241','Washer',6000.00);

INSERT INTO INVENTORY
VALUES
('285','Wheel',350.00);

INSERT INTO INVENTORY
VALUES
('295','Belt',85.00);

INSERT INTO INVENTORY
VALUES
('305','Wheel',3000.00);

INSERT INTO INVENTORY
VALUES
('310','Tire',4000.00);

SELECT
    *
FROM inventory;


ALTER TABLE  SUPPLIERS DROP COLUMN ADDRESS;  
ALTER TABLE  SUPPLIERS ADD (ADDRESS char(40));

DELETE FROM SUPPLIERS;

INSERT INTO SUPPLIERS
VALUES
('51','DEFECTO PARTS','16 BUM ST., BROKEN HAND WY');

INSERT INTO SUPPLIERS
VALUES ('52','VESUVIUS, INC.','512 ANCIENT BLVD., POMPEII NY');

INSERT INTO SUPPLIERS
VALUES ('53','ATLANTIS CO.','8 OCEAN AVE., WASHINGTON DC');

INSERT INTO SUPPLIERS
VALUES ('54','TITANIC PARTS','32 LARGE ST., BIGTOWN TX');

INSERT INTO SUPPLIERS
VALUES ('57','EAGLE HARDWARE','64 TRANQUILITY PLACE, APOLLO MN');

INSERT INTO SUPPLIERS
VALUES ('61','SKY PARTS','128 ORBIT BLVD., SIDNEY AUSTRALIA');

INSERT INTO SUPPLIERS
VALUES ('64','KNIGHT LTD.','256 ARTHUR COURT, CAMELOT ENGLAND');

SELECT *
FROM SUPPLIERS;

INSERT INTO SUPPLIES
VALUES ('232','53',20.00,'01-APR-88');

INSERT INTO SUPPLIES
VALUES('221','51',10.00,'02-APR-88');

INSERT INTO SUPPLIES
VALUES('221','54',30.00,'03-APR-88');

INSERT INTO SUPPLIES
VALUES('241','51',50.00,'03-APR-88');

INSERT INTO SUPPLIES
VALUES('222','61',40.00,'10-APR-88');

SELECT *
FROM SUPPLIES;

 
ALTER TABLE QUOTATIONS DROP COLUMN PRICE;  
ALTER TABLE QUOTATIONS ADD (PRICE DECIMAL(4,2));

DELETE FROM QUOTATIONS;

ALTER TABLE QUOTATIONS DROP COLUMN QONORDER;  
ALTER TABLE QUOTATIONS ADD (QONORDER DECIMAL(4,2));

DELETE FROM QUOTATIONS;

DELETE FROM QUOTATIONS;

ALTER TABLE QUOTATIONS DROP COLUMN QONORDER;
ALTER TABLE QUOTATIONS DROP COLUMN DELIVERY_TIME;
ALTER TABLE QUOTATIONS DROP COLUMN PRICE;
ALTER TABLE QUOTATIONS ADD (QONORDER INT);
ALTER TABLE QUOTATIONS ADD (DELIVERY_TIME INT);
ALTER TABLE QUOTATIONS ADD (PRICE DECIMAL(4,2));


DROP TABLE QUOTATIONS;

CREATE TABLE QUOTATIONS
(SUPPNO CHAR(3),
PARTNO CHAR(3),
PRICE DECIMAL(4,2),
DELIVERY_TIME INT,
QONORDER INT,
PRIMARY KEY(SUPPNO, PARTNO),
FOREIGN KEY(SUPPNO) REFERENCES SUPPLIERS,
FOREIGN KEY(PARTNO) REFERENCES INVENTORY);

INSERT INTO QUOTATIONS
VALUES('51','221',0.3, 10, 50);
 
INSERT INTO QUOTATIONS
VALUES('51','231', 0.10, 10, 0);

INSERT INTO QUOTATIONS
VALUES('53','222',0.25,15,0);

INSERT INTO QUOTATIONS
VALUES('53','232',0.1, 15,200);

INSERT INTO QUOTATIONS
VALUES('53','241',0.08,15,0);

INSERT INTO QUOTATIONS
VALUES('54','209',18.00, 21, 0);

INSERT INTO QUOTATIONS
VALUES('54','221',0.1,30,150);

INSERT INTO QUOTATIONS
VALUES('54','231',0.04,30,200);

INSERT INTO QUOTATIONS
VALUES('54','241',0.02,30,200);

INSERT INTO QUOTATIONS
VALUES('57','285',21.0, 14, 0);

INSERT INTO QUOTATIONS
VALUES('57','295',8.5, 21, 24);

INSERT INTO QUOTATIONS
VALUES('61','221',0.2,21,0);

INSERT INTO QUOTATIONS
VALUES('61','222',0.2,21,200);

INSERT INTO QUOTATIONS
VALUES('61','241',0.05,21,0);

INSERT INTO QUOTATIONS
VALUES('64','207',29,14,20);

INSERT INTO QUOTATIONS
VALUES('64','209',19.5,7,7);

SELECT * 
FROM quotations;


CREATE TABLE EMPLOYEE
(EMPNUM NUMBER(3)PRIMARY KEY,
EMPNAME CHAR(16),
EMPPHONE NUMBER(5));

CREATE TABLE PC
(TAGNUM NUMBER(5),
COMPID CHAR(8),
EMPNUM NUMBER(3),
LOCATION CHAR(12),
PRIMARY KEY (TAGNUM,COMPID),
FOREIGN KEY (EMPNUM) REFERENCES EMPLOYEE);

INSERT INTO EMPLOYEE
VALUES
(124,'ALVAREZ, RAMON',1212);

INSERT INTO EMPLOYEE
VALUES(567,'FEINSTEIN, BETTY',8716);

INSERT INTO EMPLOYEE
VALUES(611,'DINH, MELISSA',2963);


INSERT INTO PC
VALUES(32808,'M759',611,'Accounting');

INSERT INTO PC
VALUES(37691,'B121',124,'Sales');

INSERT INTO PC
VALUES(57772,'COO7',567,'Info Systems');

INSERT INTO PC
VALUES(59836,'B221',124,'Home');

INSERT INTO PC
VALUES(77740,'M759',567,'Home');

SELECT *
FROM PC;


SELECT *
FROM EMPLOYEE;

SELECT USER, SYSDATE FROM DUAL;

SELECT * FROM INVENTORY;

SELECT * FROM ITEM;

SELECT PARTNO,
SUPPNO,
PRICE,
round (PRICE * 1.03,2) AS TAXED_PRICE,
QONORDER
FROM QUOTATIONS;


SELECT SUPPNO,
NAME,
ADDRESS
FROM SUPPLIERS
WHERE NAME LIKE 'A%';

SELECT * FROM QUOTATIONS
WHERE QONORDER <> 0 AND PRICE <= 1
AND DELIVERY_TIME < 20;

SELECT PARTNO FROM INVENTORY
WHERE QONHAND IS NULL;

commit;

/* Insert a row in PC Table */

INSERT into PC (TAGNUM,COMPID,LOCATION)
VALUES(98326,'B221','Finance');

SELECT * 
FROM PC;

/* For storehouse 1, find the number of items and their total inventory value in Item table */

SELECT COUNT(ITEM_NUM) AS ITEM_COUNT, SUM(ON_HAND * PRICE) AS TOTAL_VALUE
FROM ITEM
WHERE STOREHOUSE = 1;


/* For customers, display number of rows, total of balances, average balance, maximum balance, and minimum balance */

SELECT COUNT(CUSTOMER_NUM) AS NUM_ROWS, SUM(BALANCE) AS TOTAL_BALANCE, ROUND(AVG(BALANCE),2) AS AVERAGE_BALANCE, MAX(BALANCE) AS MAX_BALANCE, MIN(BALANCE) AS MIN_BALANCE
FROM CUSTOMER;

/* List item_num, description, total of num_ordered (rename it as Orders), and total order_value based on data in the order_line table */

SELECT ITEM.ITEM_NUM,ITEM.DESCRIPTION, 
SUM(NUM_ORDERED) AS ORDERS, SUM(NUM_ORDERED * QUOTED_PRICE) AS ORDER_VALUE
FROM ORDER_LINE
LEFT JOIN ITEM ON ORDER_LINE.ITEM_NUM = ITEM.ITEM_NUM
GROUP BY
ITEM.ITEM_NUM,
ITEM.DESCRIPTION;

COMMIT;

/* 1. Show the distinct postal_codes and their city names */

SELECT CITY, POSTAL_CODE FROM CUSTOMER;

/* 2. How many customers are in each Postal code. List postal code, city, state, and Num_Of_Customers */

SELECT CITY,STATE,POSTAL_CODE, COUNT(*) AS NUM_OF_CUSTOMERS
FROM CUSTOMER
GROUP BY postal_code,CITY,STATE;

/* 3. How many items are there in each storehouse of each category.  Sort by storehouse, category */

SELECT STOREHOUSE, CATEGORY,
COUNT(ITEM_NUM)
FROM ITEM
GROUP BY STOREHOUSE, CATEGORY;

/* 4. What is the price of the least expensive item in the item table. */

SELECT MIN(PRICE) AS MINIMUM_PRICE
FROM ITEM;

/* 5. List Customer number, customer name, Balance, and Credit_Limit. Create a new column called Balance_Level and categorize balance above $3000 as High, between $1000 to $3000 as Moderate, below $1000 as Low. */

SELECT CUSTOMER_NUM, CUSTOMER_NAME, BALANCE, CREDIT_LIMIT,

CASE
    WHEN BALANCE > 3000 THEN 'High'
    WHEN BALANCE > = 1000 AND BALANCE < 3000 THEN 'Moderate'
    WHEN BALANCE < 1000 THEN 'Low'
END AS BALANCE_LEVEL
FROM CUSTOMER;

/* 6. For each order, list the order number, and OrderValue (which should the based on the total of quantity x price data) with OrderValue of $500 or above. */

SELECT order_num,
SUM(num_ordered * quoted_price) AS order_value
FROM order_line
GROUP BY order_num
HAVING SUM(num_ordered * quoted_price) >500; 

commit;

/* 1. Display the customer number, customer name, order number, and order date for each order. Sort the results by customer number. */

SELECT CUSTOMER.CUSTOMER_NUM,
CUSTOMER_NAME, 
ORDER_NUM, 
ORDER_DATE

FROM CUSTOMER INNER JOIN ORDERS
ON CUSTOMER.CUSTOMER_NUM = ORDERS.CUSTOMER_NUM

ORDER BY CUSTOMER_NUM;

/* 2. Display the customer number, customer name, order number, and order date for all orders. Include all customers in the results. For customers that do not have orders, omit the order number and order date. */

SELECT CUSTOMER.CUSTOMER_NUM,
CUSTOMER_NAME, 
ORDER_NUM, 
ORDER_DATE

FROM CUSTOMER LEFT JOIN ORDERS
ON CUSTOMER.CUSTOMER_NUM = ORDERS.CUSTOMER_NUM

ORDER BY CUSTOMER_NUM;

/* 3. Create a view named TOYS that consists of the item number, description, units on hand, and unit price of each item in category TOY.  */

CREATE VIEW TOYS AS

SELECT ITEM_NUM,
DESCRIPTION, 
ON_HAND,
PRICE

FROM ITEM
WHERE CATEGORY = 'TOY';

SELECT * FROM TOYS;


/* 4. List customer number, customer name, rep name, rep number, and Number_Ordered. */

SELECT
CUSTOMER.CUSTOMER_NUM,
CUSTOMER.CUSTOMER_NAME,
CONCAT(REP.FIRST_NAME, REP.LAST_NAME) AS REP_NAME,
REP.REP_NUM,
ORDER_LINE.NUM_ORDERED

FROM CUSTOMER INNER JOIN REP
ON CUSTOMER.REP_NUM = REP.REP_NUM

INNER JOIN ORDERS
ON CUSTOMER.CUSTOMER_NUM = ORDERS.CUSTOMER_NUM

INNER JOIN ORDER_LINE
ON ORDERS.ORDER_NUM = ORDER_LINE.ORDER_NUM;

COMMIT;

/* SQL ASSN 3 - 11/08/2020
 1. The TOYS view is no longer necessary, please try to delete it.  Confirm the removal of TOYS view by using select view_name from user_view */

DROP VIEW TOYS;

SELECT * FROM TOYS;


/* 2. For each order, list the order number and order date along with the number and name of the customer that placed the order. */

SELECT ORDER_NUM,
ORDER_DATE,
CUSTOMER.CUSTOMER_NUM,
CUSTOMER_NAME

FROM CUSTOMER INNER JOIN ORDERS
ON CUSTOMER.CUSTOMER_NUM = ORDERS.CUSTOMER_NUM;



/* 3. Display item number and description for items that have not been ordered. */

SELECT ITEM.ITEM_NUM,
DESCRIPTION,
NUM_ORDERED

FROM ITEM LEFT JOIN ORDER_LINE
ON ITEM.ITEM_NUM = ORDER_LINE.ITEM_NUM

WHERE NUM_ORDERED IS NULL;


/* 4. Display the customer number, customer name, order number, and order date for each order. Sort the results by order date by descending sequence. */

SELECT CUSTOMER.CUSTOMER_NUM,
CUSTOMER_NAME,
ORDER_NUM,
ORDER_DATE

FROM CUSTOMER INNER JOIN ORDERS
ON CUSTOMER.CUSTOMER_NUM = ORDERS.CUSTOMER_NUM

ORDER BY ORDER_DATE DESC;


/* 5. For each order line, what is the amount of discount, and percent discount given.
Discount is based on difference between price and quoted_price.  
Report order number, order date, discount amount, and discount percent. Percentage of discount is based on difference_ in_ price/price*100 */

SELECT ORDERS.ORDER_NUM,
ORDER_DATE,
PRICE - QUOTED_PRICE AS DISCOUNT_AMOUNT,
ROUND((PRICE - QUOTED_PRICE) / PRICE * 100,2) AS DISCOUNT_PERCENT

FROM ORDERS 
INNER JOIN ORDER_LINE
ON ORDERS.ORDER_NUM = ORDER_LINE.ORDER_NUM

INNER JOIN ITEM
ON ORDER_LINE.ITEM_NUM = ITEM.ITEM_NUM;


/* 6. For each order report order number, order date, and discount percent. */

SELECT ORDERS.ORDER_NUM,
ORDER_DATE,
ROUND((PRICE - QUOTED_PRICE) / PRICE * 100,2) AS DISCOUNT_PERCENT

FROM ORDERS 
INNER JOIN ORDER_LINE
ON ORDERS.ORDER_NUM = ORDER_LINE.ORDER_NUM

INNER JOIN ITEM
ON ORDER_LINE.ITEM_NUM = ITEM.ITEM_NUM;

COMMIT;


